import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Issues with import/export","titleTemplate":":title | Essentials ZOO Documentation | ZOOlanders","description":"","frontmatter":{},"headers":[],"relativePath":"essentials-for-zoo/troubleshooting/port.md","filePath":"essentials-for-zoo/troubleshooting/port.md"}');
const _sfc_main = { name: "essentials-for-zoo/troubleshooting/port.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="issues-with-import-export" tabindex="-1">Issues with import/export <a class="header-anchor" href="#issues-with-import-export" aria-label="Permalink to &quot;Issues with import/export&quot;">​</a></h1><h2 id="slow-imports" tabindex="-1">Slow Imports <a class="header-anchor" href="#slow-imports" aria-label="Permalink to &quot;Slow Imports&quot;">​</a></h2><p>The import process can be slowed down because of plugins hooking into the <code>item:save</code> event, eg &#39;Search - ZOO&#39; or &#39;Smart Search - ZOO&#39;. You can disable those with caution, as most likely for production you would want their hooks to be processed.</p><h2 id="a-csv-file-won-t-import-or-it-does-with-broken-symbols" tabindex="-1">A CSV file won&#39;t import or it does with broken symbols <a class="header-anchor" href="#a-csv-file-won-t-import-or-it-does-with-broken-symbols" aria-label="Permalink to &quot;A CSV file won&#39;t import or it does with broken symbols&quot;">​</a></h2><p>Please make sure the file is UTF-8 encoded and the dates are formatted as <code>YYYY-MM-DD HH:MM:SS</code>.</p><h2 id="importing-related-items" tabindex="-1">Importing Related Items <a class="header-anchor" href="#importing-related-items" aria-label="Permalink to &quot;Importing Related Items&quot;">​</a></h2><p>There is a known limitation when export/importing RelatedItems/Pro data using CSV within one App instance. When certain item is the first in the list and it is related with the last item, such relation will not be saved because at the moment when the first item is imported, the last one doesn&#39;t exist yet. As a solution you can do the following:</p><ol><li>Import the CSV file in a new App instance. Items will be imported with new IDs without the relations.</li><li>Export CSV from this new App. Items IDs will be saved in the file.</li><li>Copy the IDs from the recently exported CSV file and update the initial CSV file with new IDs.</li><li>Import the updated CSV file. The existent Items will be updated and relations imported.</li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Make sure the Related Items relation is set using an item <em>ID</em> or <em>alias</em>. But be aware that in case there is an item existing in any App instance with the same alias as one of the Related Items, the imported item will be related to this existent item.</p></div><h2 id="importing-multiple-element-values-with-csv" tabindex="-1">Importing multiple element values with CSV <a class="header-anchor" href="#importing-multiple-element-values-with-csv" aria-label="Permalink to &quot;Importing multiple element values with CSV&quot;">​</a></h2><p>Each value must have a separate column. In case of Option elements such as Select, all options must be configured before hand in the backend.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("essentials-for-zoo/troubleshooting/port.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const port = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  port as default
};
