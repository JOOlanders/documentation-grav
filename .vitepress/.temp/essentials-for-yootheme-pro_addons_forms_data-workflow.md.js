import { ssrRenderAttrs, ssrRenderAttr } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_0 = "/assets/form-data-placeholders.BB0pOWTd.webp";
const _imports_1 = "/assets/form-dynamic-content.D6W5ZzRv.webp";
const __pageData = JSON.parse('{"title":"Data Workflow","titleTemplate":":title | Essentials YOOtheme Pro Documentation | ZOOlanders","description":"","frontmatter":{},"headers":[],"relativePath":"essentials-for-yootheme-pro/addons/forms/data-workflow.md","filePath":"essentials-for-yootheme-pro/addons/forms/data-workflow.md"}');
const _sfc_main = { name: "essentials-for-yootheme-pro/addons/forms/data-workflow.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="data-workflow" tabindex="-1">Data Workflow <a class="header-anchor" href="#data-workflow" aria-label="Permalink to &quot;Data Workflow&quot;">​</a></h1><p>Forms are dynamic in nature as it is YOOtheme Pro builder with dynamic content. Essentials forms builds up on both to create a data workflow before and after a submission.</p><h2 id="data-placeholders" tabindex="-1">Data Placeholders <a class="header-anchor" href="#data-placeholders" aria-label="Permalink to &quot;Data Placeholders&quot;">​</a></h2><p>Data placeholders are plain string references to the submitted data based on their control names. For instance, if there is an input field with the control name <em>email</em>, the placeholder reference would be <code>{email}</code>. These placeholders can be placed in action settings and will be replaced with the submitted data value during the action execution.</p><p><img${ssrRenderAttr("src", _imports_0)} alt="Form Data Placeholders"></p><small> As a quick reference a list of available placeholders can be accessed by clicking the Placeholder Button. </small><h2 id="form-area-source" tabindex="-1">Form Area Source <a class="header-anchor" href="#form-area-source" aria-label="Permalink to &quot;Form Area Source&quot;">​</a></h2><p>For each Form Area, a dynamic content source is created as an alternative, and more convenient, way of accessing submitted data during actions configuration. As a dynamic source, it has all the advantages of <a href="https://yootheme.com/support/yootheme-pro/joomla/dynamic-content" target="_blank" rel="noreferrer">YOOtheme Pro Dynamic Content</a>, like the ability to alter the submitted data with filters.</p><p>The mapping option for the form area source will be listed as part of each field <em>Dynamic</em> options under the <em>Submission Group</em>.</p><p><img${ssrRenderAttr("src", _imports_1)} alt="Form Dynamic Content"></p><h2 id="page-sources" tabindex="-1">Page Sources <a class="header-anchor" href="#page-sources" aria-label="Permalink to &quot;Page Sources&quot;">​</a></h2><p>In certain form workflows, there may be a need for dynamic content from the current page, also known as page sources. This content is available during the form rendering, but is not during the form submission, which is why it&#39;s not listed as a mapping option. To work around this limitation page content can be mapped to a <a href="./elements.html#hidden">hidden form field</a> and referenced in the actions using <a href="#data-placeholders">data placeholders</a> or a <a href="#form-area-source">form area source</a>.</p><div class="warning custom-block"><p class="custom-block-title">Hidden, But Still Exposed</p><p>It&#39;s important to note that although hidden field content is not visible on the page, it is still exposed in the source code of the page. If the data is sensitive, it&#39;s crucial to enable the encryption setting in the hidden field to ensure that it remains secure and protected from unauthorized access or disclosure.</p></div><h2 id="contextual-data" tabindex="-1">Contextual Data <a class="header-anchor" href="#contextual-data" aria-label="Permalink to &quot;Contextual Data&quot;">​</a></h2><p>Contextual data such as the current date and time, page URL, and user IP are not included in the submission by default. However, since this information is available within dynamic sources, it can be easily mapped to the actions when necessary.</p><p>As a quick reference use these sources:</p><table><thead><tr><th>Data</th><th>Source</th></tr></thead><tbody><tr><td>Datetime</td><td><em>Request -&gt; Timestamp</em></td></tr><tr><td>User IP</td><td><em>Request -&gt; IP</em></td></tr><tr><td>Page URL</td><td><em>Request -&gt; Href</em></td></tr></tbody></table><h2 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h2><p>For a form data to be submitted it must pass the fields validation as well as the CAPTCHA validation, if any present. The validation is first run in the browser, and once again via server-side ajax request.</p><p>Each field has its own validation rules which can be set independently under the element <em>Validation Tab</em> settings. For more information and integration details, refer to <a href="./elements.html">elements</a> documentation.</p><div class="warning custom-block"><p class="custom-block-title">Custom Error Message</p><p>At the moment, it is only possible to customize the validation error messages for server-side validation, not for HTML5 validation. A workaround is to disable HTML5 validation in the Form Area configuration.</p></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("essentials-for-yootheme-pro/addons/forms/data-workflow.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const dataWorkflow = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  dataWorkflow as default
};
