import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { _ as _imports_2 } from "./storage-s3.xAdblSfP.js";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_0 = "/assets/storage-local.APo6bQPW.webp";
const _imports_1 = "/assets/storage-ftp.C5-tFkLY.webp";
const __pageData = JSON.parse('{"title":"Storage Abstraction","titleTemplate":":title | Essentials YOOtheme Pro Documentation | ZOOlanders","description":"","frontmatter":{},"headers":[],"relativePath":"essentials-for-yootheme-pro/storage.md","filePath":"essentials-for-yootheme-pro/storage.md"}');
const _sfc_main = { name: "essentials-for-yootheme-pro/storage.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="storage-abstraction" tabindex="-1">Storage Abstraction <a class="header-anchor" href="#storage-abstraction" aria-label="Permalink to &quot;Storage Abstraction&quot;">​</a></h1><p>File Storage Abstraction allows a seamles experience for working with files across different platforms and locations.</p><p>Essentials has several features that involve reading and/or writing data with abstraction, allowing for interaction with many different types of filesystems regardless of their location. To accomplish this, we have implemented <a href="https://flysystem.thephpleague.com/docs" target="_blank" rel="noreferrer">FlySystem</a> as the abstraction library of choice which provides a unified interface for working with various filesystems.</p><div class="tip custom-block"><p class="custom-block-title">Storage Usage</p><p>Even storage abstraction is only used by Layouts Addon, at the moment, it is already possible to use in your custom addons.</p></div><h2 id="local-storage-adapter" tabindex="-1">Local Storage Adapter <a class="header-anchor" href="#local-storage-adapter" aria-label="Permalink to &quot;Local Storage Adapter&quot;">​</a></h2><p>The <strong>Local Storage Adapter</strong> sets a specific folder as a storage location. This folder can either be relative to the site directory, such as <code>layouts</code>, or absolute from the server root, such as <code>/home/user/layouts</code>.</p><p>The designated folder must already exist and be accessible for reading and writing by the PHP user. Typically, this means that the folder should be located within the user&#39;s home directory.</p><p><img${ssrRenderAttr("src", _imports_0)} alt="Local Storage Adapter"></p><table><thead><tr><th>Setting</th><th>Description</th></tr></thead><tbody><tr><td><em>Name</em></td><td>A name to identify this storage.</td></tr><tr><td><em>Root</em></td><td>The path that will be used as the storage root, e.g. <code>layouts</code> as a site relative path or <code>/layouts</code> as a server absolute.</td></tr><tr><td><em>Write Permission</em></td><td>Wether the storage will have Write in addition to Read permission.</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">Security Reminder</p><p>Folders within the site&#39;s root directory are publicly accessible and exposed to those who know the folder path and its contents naming, unless you <a href="https://stackoverflow.com/questions/9507645/htaccess-deny-from-all" target="_blank" rel="noreferrer">explicitly deny access to it</a>.</p></div><h2 id="ftp-storage-adapter" tabindex="-1">FTP Storage Adapter <a class="header-anchor" href="#ftp-storage-adapter" aria-label="Permalink to &quot;FTP Storage Adapter&quot;">​</a></h2><p>The <strong>S/FTP Storage Adapter</strong> sets a remote server folder as storage through a S/FTP protocol.</p><p><img${ssrRenderAttr("src", _imports_1)} alt="S/FTP Storage Adapter"></p><table><thead><tr><th>Setting</th><th>Description</th><th style="${ssrRenderStyle({ "text-align": "center" })}">Required</th></tr></thead><tbody><tr><td><em>Name</em></td><td>A name to identify this storage.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Host</em></td><td>The URL to the server hosting the folder.</td><td style="${ssrRenderStyle({ "text-align": "center" })}">✓</td></tr><tr><td><em>Port</em></td><td>The port to use for establishing the connection with the server, defualts to <code>21</code>.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Username/Password</em></td><td>The credentials for establishing the connection with the server.</td><td style="${ssrRenderStyle({ "text-align": "center" })}">✓</td></tr><tr><td><em>Root</em></td><td>The remote path that will be used as the storage root.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Write Permission</em></td><td>Wether the storage will have Write in addition to Read permission.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Passive Mode</em></td><td>Wether to use Passive Mode for the connection.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>SSL</em></td><td>Wether to use SSL for the connection.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>UTF8</em></td><td>Wether to use UTF8 as the files content encoding format.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Ignore Passive Address</em></td><td>Wether to ignore Passive Address for the connection.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr></tbody></table><h2 id="s3-storage-adapter" tabindex="-1">S3 Storage Adapter <a class="header-anchor" href="#s3-storage-adapter" aria-label="Permalink to &quot;S3 Storage Adapter&quot;">​</a></h2><p>The <strong>S3 Storage Adapter</strong> sets an Amazon S3 Bucket as storage.</p><p><img${ssrRenderAttr("src", _imports_2)} alt="S3 Storage Adapter"></p><table><thead><tr><th>Setting</th><th>Description</th><th style="${ssrRenderStyle({ "text-align": "center" })}">Required</th></tr></thead><tbody><tr><td><em>Name</em></td><td>A name to identify this storage.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Account</em></td><td>The AWS credentials for establishing the connection.</td><td style="${ssrRenderStyle({ "text-align": "center" })}">✓</td></tr><tr><td><em>Bucket</em></td><td>The name of the Amazon S3 bucket.</td><td style="${ssrRenderStyle({ "text-align": "center" })}">✓</td></tr><tr><td><em>Region</em></td><td>The region where the bucket is hosted.</td><td style="${ssrRenderStyle({ "text-align": "center" })}">✓</td></tr><tr><td><em>Root</em></td><td>The path relative to the bucket that will be used as the storage root.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr><tr><td><em>Write Permission</em></td><td>Wether the storage will have Write in addition to Read permission.</td><td style="${ssrRenderStyle({ "text-align": "center" })}"></td></tr></tbody></table></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("essentials-for-yootheme-pro/storage.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const storage = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  storage as default
};
