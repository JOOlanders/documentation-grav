import { ssrRenderAttrs, ssrInterpolate, ssrRenderAttr } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_0 = "/assets/enable-addon.D2YWlKgL.gif";
const _imports_1 = "/assets/create-form-area.C0ASJ1K8.gif";
const _imports_2 = "/assets/add-form-actions.C10VVSws.gif";
const _imports_3 = "/assets/add-form-fields.04gXLKMK.gif";
const _imports_4 = "/assets/submission-test.9E5Z0-LF.webp";
const __pageData = JSON.parse('{"title":"Forms","titleTemplate":":title | Essentials YOOtheme Pro Documentation | ZOOlanders","description":"Empower a Section or Column with form builder and submission capabilities","frontmatter":{"title":"Forms","description":"Empower a Section or Column with form builder and submission capabilities"},"headers":[],"relativePath":"essentials-for-yootheme-pro/addons/forms/index.md","filePath":"essentials-for-yootheme-pro/addons/forms/index.md"}');
const _sfc_main = { name: "essentials-for-yootheme-pro/addons/forms/index.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="forms-builder" tabindex="-1">Forms Builder <a class="header-anchor" href="#forms-builder" aria-label="Permalink to &quot;Forms Builder&quot;">​</a></h1><p>Empower a Section, Column or Sublayout as a Form Area with form builder and submission capabilities. Structure the area with fields and trigger actions after a successful submission.</p><div class="tip custom-block"><p class="custom-block-title">Requirements</p><p>Make sure Essentials for YOOtheme Pro is <a href="/essentials-for-yootheme-pro/installation.html">installed</a> and <em>${ssrInterpolate(_ctx.$frontmatter.title)} Addon</em> enabled.</p></div><details class="details custom-block"><summary>How to enable ${ssrInterpolate(_ctx.$frontmatter.title)} Addon</summary><p>Open the <em>Customizer -&gt; Essentials -&gt; Advanced</em> panel and spot the <strong>${ssrInterpolate(_ctx.$frontmatter.title)} Addon</strong> checkbox. If is off, enable it, save the changes and refresh the page.</p>`);
  if (_ctx.$frontmatter.title !== "Elements") {
    _push(`<small><p>Notice that <strong>${ssrInterpolate(_ctx.$frontmatter.title)}</strong> is a premium addon not available in Essentials free release.</p></small>`);
  } else {
    _push(`<!---->`);
  }
  _push(`<p><img${ssrRenderAttr("src", _imports_0)} alt="Enable {{ $frontmatter.title }} Addon"></p></details><h2 id="_1-create-a-form-area" tabindex="-1">1. Create a Form Area <a class="header-anchor" href="#_1-create-a-form-area" aria-label="Permalink to &quot;1. Create a Form Area&quot;">​</a></h2><p>An Essential form is structured inside a <a href="./form-area.html">Form Area</a>. Lets create one.</p><p><img${ssrRenderAttr("src", _imports_1)} alt="Create a Form Area"></p><ol><li>Open the layout builder you want to create the form at.</li><li>Create a new Section and access it <em>Advanced Tab</em> settings.</li><li>Toggle the <code>Enable as Form Area</code> checkbox.</li></ol><h2 id="_2-add-an-after-submit-action" tabindex="-1">2. Add an After Submit Action <a class="header-anchor" href="#_2-add-an-after-submit-action" aria-label="Permalink to &quot;2. Add an After Submit Action&quot;">​</a></h2><p>The secton has now been declared as a Form Area and we can add and after submit actions to greet the submitter with a custom message.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For more advanced scenarios, adding <em>Email</em> and <em>SaveTo</em> actions would be necessary to send an email and save the submitted data.</p></div><p><img${ssrRenderAttr("src", _imports_2)} alt="Add After Submit Actions"></p><ol><li>Open the Form Area configuration created in the previous step.</li><li>In <em>After Submit Actions</em> add a new action of the type <em>Display Message</em>.</li><li>Input in the <em>Message</em> field <code>Thank you for your submission, your comment was {comment}!</code>.</li></ol><div class="tip custom-block"><p class="custom-block-title">Notice the <code>{comment}</code> part</p><p>It&#39;s what we call <a href="./data-workflow.html#data-placeholders">Data Placeholders</a>, and is one of the simplest and direct ways to reference submitted data.</p></div><h2 id="_3-add-form-fields" tabindex="-1">3. Add Form Fields <a class="header-anchor" href="#_3-add-form-fields" aria-label="Permalink to &quot;3. Add Form Fields&quot;">​</a></h2><p>Essentials comes with prebuild <a href="./elements.html">elements</a> to structure a form as needed. Let&#39;s add a textarea to collect the comment and a submit button.</p><p><img${ssrRenderAttr("src", _imports_3)} alt="Add Form Fields"></p><ol><li>Go back to the builder main panel and add an <strong>Textarea Element</strong> from the <code>Form Essentials</code> group.</li><li>Open it configuration panel and input <code>comment</code> in the <em>Control Name</em> setting.</li><li>Repeat the process adding a <em>Button Element</em> which will render a submit button by default.</li></ol><h2 id="_4-test-the-submission" tabindex="-1">4. Test The Submission <a class="header-anchor" href="#_4-test-the-submission" aria-label="Permalink to &quot;4. Test The Submission&quot;">​</a></h2><p>Let&#39;s give it a try!</p><p><img${ssrRenderAttr("src", _imports_4)} alt="Form Submission Test"></p><ol><li>Locate the form in the builder preview.</li><li>Input a message in the Comment textarea and Submit.</li></ol><p>You should see a modal with the submitted message!</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("essentials-for-yootheme-pro/addons/forms/index.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const index = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  index as default
};
